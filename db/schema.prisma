// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// The account of user of Station
// user's wallet address is primary key
model Account {
  id          Int                 @id @default(autoincrement())
  address     String              @unique
  skills      AccountSkill[]
  tickets     AccountTerminal[]
  initiatives AccountInitiative[]
  data        Json?
  endorsed    Endorsement[]       @relation("Endorsed")
  endorsedBy  Endorsement[]       @relation("EndorsedBy")
}

// Each DAO is represented by a terminal.
// roleNameOverrides overrides default role names
model Terminal {
  id            Int               @id @default(autoincrement())
  ticketAddress String            @unique
  handle        String            @unique
  initiatives   Initiative[]
  roles         Role[]
  tickets       AccountTerminal[]
  data          Json?
}

// A role within a terminal
model Role {
  terminal   Terminal          @relation(fields: [terminalId], references: [id])
  terminalId Int
  localId    Int               @default(autoincrement())
  tickets    AccountTerminal[]
  data       Json?

  @@id([terminalId, localId])
}

model AccountTerminal {
  account     Account  @relation(fields: [accountId], references: [id])
  accountId   Int
  terminal    Terminal @relation(fields: [terminalId], references: [id])
  terminalId  Int
  role        Role?    @relation(fields: [terminalId, roleLocalId], references: [terminalId, localId])
  roleLocalId Int?
  joinedAt    DateTime @default(now())
  active      Boolean  @default(true)
  data        Json?

  @@id([accountId, terminalId])
}

// An initiative within a terminal
model Initiative {
  id         Int                 @id @default(autoincrement())
  terminal   Terminal            @relation(fields: [terminalId], references: [id])
  terminalId Int
  localId    Int                 @default(autoincrement())
  accounts   AccountInitiative[]
  data       Json?

  Endorsement Endorsement[]
  @@unique([terminalId, localId])
}

// Associates accounts with initiatives for applications and contributor membership
model AccountInitiative {
  account      Account                 @relation(fields: [accountId], references: [id])
  accountId    Int
  initiative   Initiative              @relation(fields: [initiativeId], references: [id])
  initiativeId Int
  createdAt    DateTime                @default(now())
  status       AccountInitiativeStatus @default(APPLIED)
  data         Json?

  @@id([accountId, initiativeId])
}

model Skill {
  id       Int            @id @default(autoincrement())
  name     String         @unique
  accounts AccountSkill[]
}

model AccountSkill {
  account   Account @relation(fields: [accountId], references: [id])
  accountId Int
  skill     Skill   @relation(fields: [skillId], references: [id])
  skillId   Int

  @@id([accountId, skillId])
}

// Off-chain transaction to signal a user's support for another user.
// We trigger signatures to write this endorsement model on-chain.
model Endorsement {
  id           Int        @id @default(autoincrement())
  initiative   Initiative @relation(fields: [initiativeId], references: [id])
  initiativeId Int
  endorser     Account    @relation(name: "Endorsed", fields: [endorserId], references: [id])
  endorsee     Account    @relation(name: "EndorsedBy", fields: [endorseeId], references: [id])
  endorserId   Int
  endorseeId   Int
  timestamp    DateTime   @default(now())
  data         Json?
}

enum AccountInitiativeStatus {
  APPLIED
  INVITED
  CONTRIBUTOR
  INACTIVE
}
