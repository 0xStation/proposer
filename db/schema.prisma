// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

// unique links by /profile/[address]
// unique links by /profile/discord/[discordId]
model Account {
  id        Int               @id @default(autoincrement())
  address   String?           @unique
  discordId String?           @unique
  tickets   AccountTerminal[]
  data      Json?
  sessions  Session[]
  proposals AccountProposal[]
  rfps      Rfp[]

  // v1
  skills      AccountSkill[]
  initiatives AccountInitiative[]
  endorsed    Endorsement[]       @relation("Endorsed")
}

// unique links by /terminal/[handle]
model Terminal {
  id         Int               @id @default(autoincrement())
  handle     String            @unique
  data       Json?
  members    AccountTerminal[]
  tags       Tag[]
  checkbooks Checkbook[]
  rfps       Rfp[]
  proposals  Proposal[]
  proposers  AccountProposal[]

  // v1
  ticketAddress String?      @unique
  initiatives   Initiative[]
  roles         Role[]
}

model AccountTerminal {
  account     Account              @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId   Int
  terminal    Terminal             @relation(fields: [terminalId], references: [id])
  terminalId  Int
  joinedAt    DateTime             @default(now())
  tags        AccountTerminalTag[]
  data        Json?
  // v1
  active      Boolean              @default(true)
  roleLocalId Int?
  role        Role?                @relation(fields: [terminalId, roleLocalId], references: [terminalId, localId])

  @@id([accountId, terminalId])
}

model Tag {
  id         Int                  @id @default(autoincrement())
  type       String
  value      String
  active     Boolean              @default(true)
  terminal   Terminal             @relation(fields: [terminalId], references: [id])
  terminalId Int
  discordId  String?
  data       Json?
  tickets    AccountTerminalTag[]

  @@unique([value, terminalId])
}

model AccountTerminalTag {
  tag              Tag             @relation(fields: [tagId], references: [id])
  tagId            Int
  ticket           AccountTerminal @relation(fields: [ticketAccountId, ticketTerminalId], references: [accountId, terminalId], onDelete: Cascade)
  ticketAccountId  Int
  ticketTerminalId Int

  @@id([tagId, ticketAccountId, ticketTerminalId])
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  userId             Int?
  user               Account?  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Checkbook {
  address    String   @id
  chainId    Int
  name       String
  terminalId Int
  terminal   Terminal @relation(fields: [terminalId], references: [id])
  quorum     Int
  signers    String[]
  data       Json
  rfps       Rfp[]
}

// unique links by /terminal/[handle]/rfp/[localId]
model Rfp {
  id             String     @id @default(uuid())
  terminalId     Int
  terminal       Terminal   @relation(fields: [terminalId], references: [id])
  fundingAddress String
  checkbook      Checkbook? @relation(fields: [fundingAddress], references: [address])
  authorAddress  String
  author         Account?   @relation(fields: [authorAddress], references: [address])
  startDate      DateTime
  endDate        DateTime?
  status         RfpStatus  @default(DRAFT)
  data           Json
  proposals      Proposal[]
}

// unique links by /terminal/[handle]/proposal/[localId]
model Proposal {
  id             String            @id @default(uuid())
  terminalId     Int
  terminal       Terminal          @relation(fields: [terminalId], references: [id])
  fundingAddress String
  rfpId          String
  rfp            Rfp               @relation(fields: [rfpId], references: [id])
  status         ProposalStatus    @default(DRAFT)
  data           Json
  createdAt      DateTime          @default(now())
  collaborators  AccountProposal[]
}

model AccountProposal {
  id         Int      @id @default(autoincrement())
  address    String
  account    Account? @relation(fields: [address], references: [address])
  terminalId Int
  terminal   Terminal @relation(fields: [terminalId], references: [id])
  proposalId String
  proposal   Proposal @relation(fields: [proposalId], references: [id])
}

enum RfpStatus {
  DRAFT
  PUBLISHED
  DELETED
}

enum ProposalStatus {
  DRAFT
  PUBLISHED
}

//
//  V1 Models -- no longer used
//

// A role within a terminal
model Role {
  terminal   Terminal          @relation(fields: [terminalId], references: [id])
  terminalId Int
  localId    Int               @default(autoincrement())
  tickets    AccountTerminal[]
  data       Json?

  @@id([terminalId, localId])
}

// An initiative within a terminal
model Initiative {
  id         Int                 @id @default(autoincrement())
  terminal   Terminal            @relation(fields: [terminalId], references: [id])
  terminalId Int
  localId    Int                 @default(autoincrement())
  accounts   AccountInitiative[]
  skills     InitiativeSkill[]
  data       Json?

  @@unique([terminalId, localId])
}

// deprecated
// Associates accounts with initiatives for applications and contributor membership
model AccountInitiative {
  account      Account                 @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId    Int
  initiative   Initiative              @relation(fields: [initiativeId], references: [id])
  initiativeId Int
  createdAt    DateTime                @default(now())
  status       AccountInitiativeStatus @default(INTERESTED)
  data         Json?

  @@id([accountId, initiativeId])
}

enum AccountInitiativeStatus {
  INTERESTED
  CONTRIBUTING
  PREVIOUSLY_CONTRIBUTED
}

model Skill {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  accounts    AccountSkill[]
  initiatives InitiativeSkill[]
}

model AccountSkill {
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId Int
  skill     Skill   @relation(fields: [skillId], references: [id])
  skillId   Int

  @@id([accountId, skillId])
}

// deprecated
model InitiativeSkill {
  initiative   Initiative @relation(fields: [initiativeId], references: [id])
  initiativeId Int
  skill        Skill      @relation(fields: [skillId], references: [id])
  skillId      Int

  @@id([initiativeId, skillId])
}

model Endorsement {
  id               Int      @id @default(autoincrement())
  initiativeId     Int
  endorser         Account  @relation(name: "Endorsed", fields: [endorserId], references: [id], onDelete: Cascade)
  endorserId       Int
  endorseeId       Int
  timestamp        DateTime @default(now())
  endorsementValue Int
  data             Json?
}

//
// Don't write new models below here!
// This is the deprecated V1 models section
// Write new models above this section :)
//
