// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  VISITOR
  COMMUTOR
  STAFF
}

// The account of user of Station
// user's wallet address is primary key
model Account {
  address     String                  @id
  name        String
  handle      String
  pronouns    String
  role        Role                    @default(VISITOR)
  skills      Skill[]
  application InitiativeApplication[]
}

// Each DAO is represented by a termial.
// roleNameOverrides overrides default role names
model Terminal {
  id                Int          @id @default(autoincrement())
  subgraphId        String
  name              String
  handle            String
  description       String
  ticketContract    String
  roleNameOverrides Json?
  initiatives       Initiative[]
}

// An initiaitve within a terminal
model Initiative {
  id           Int                     @id @default(autoincrement())
  name         String
  shortName    String
  description  String
  terminal     Terminal                @relation(fields: [terminalId], references: [id])
  terminalId   Int
  applications InitiativeApplication[]
}

// An application into a certain initiative
model InitiativeApplication {
  id               Int        @id @default(autoincrement())
  url              String
  approved         Boolean
  applicant        Account    @relation(fields: [applicantAddress], references: [address])
  applicantAddress String
  initiative       Initiative @relation(fields: [initiativeId], references: [id])
  initiativeId     Int
}

// A user can have many skills
// I wanted this in its own table (as opposed to a field of contributor)
// so its easier to do things like show new user existing skills
// or even "grouping" skills in the future by type (design, eng etc)
model Skill {
  id       Int       @id @default(autoincrement())
  name     String
  accounts Account[]
}
