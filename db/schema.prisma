// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// The account of user of Station
// user's wallet address is primary key
model Account {
  id          Int                 @id @default(autoincrement())
  address     String              @unique
  skills      AccountSkill[]
  tickets     AccountTerminal[]
  initiatives AccountInitiative[]
  data        Json?
  endorsed    Endorsement[]       @relation("Endorsed")
  sessions    Session[]
  proposals   AccountProposal[]
}

// Each DAO is represented by a terminal.
// roleNameOverrides overrides default role names
model Terminal {
  id            Int               @id @default(autoincrement())
  ticketAddress String?           @unique
  handle        String            @unique
  initiatives   Initiative[]
  roles         Role[]
  members       AccountTerminal[]
  data          Json?
  tags          Tag[]
  proposals     Proposal[]
}

// A role within a terminal
model Role {
  terminal   Terminal          @relation(fields: [terminalId], references: [id])
  terminalId Int
  localId    Int               @default(autoincrement())
  tickets    AccountTerminal[]
  data       Json?

  @@id([terminalId, localId])
}

model AccountTerminal {
  account     Account              @relation(fields: [accountId], references: [id])
  accountId   Int
  terminal    Terminal             @relation(fields: [terminalId], references: [id])
  terminalId  Int
  role        Role?                @relation(fields: [terminalId, roleLocalId], references: [terminalId, localId])
  roleLocalId Int?
  joinedAt    DateTime             @default(now())
  active      Boolean              @default(true)
  tags        AccountTerminalTag[]
  data        Json?

  @@id([accountId, terminalId])
}

// An initiative within a terminal
model Initiative {
  id         Int                 @id @default(autoincrement())
  terminal   Terminal            @relation(fields: [terminalId], references: [id])
  terminalId Int
  localId    Int                 @default(autoincrement())
  accounts   AccountInitiative[]
  skills     InitiativeSkill[]
  data       Json?

  @@unique([terminalId, localId])
}

// Associates accounts with initiatives for applications and contributor membership
model AccountInitiative {
  account      Account                 @relation(fields: [accountId], references: [id])
  accountId    Int
  initiative   Initiative              @relation(fields: [initiativeId], references: [id])
  initiativeId Int
  createdAt    DateTime                @default(now())
  status       AccountInitiativeStatus @default(INTERESTED)
  data         Json?

  @@id([accountId, initiativeId])
}

model Skill {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  accounts    AccountSkill[]
  initiatives InitiativeSkill[]
}

model AccountSkill {
  account   Account @relation(fields: [accountId], references: [id])
  accountId Int
  skill     Skill   @relation(fields: [skillId], references: [id])
  skillId   Int

  @@id([accountId, skillId])
}

model InitiativeSkill {
  initiative   Initiative @relation(fields: [initiativeId], references: [id])
  initiativeId Int
  skill        Skill      @relation(fields: [skillId], references: [id])
  skillId      Int

  @@id([initiativeId, skillId])
}

// Off-chain transaction to signal a user's support for another user.
// We trigger signatures to write this endorsement model on-chain.
model Endorsement {
  id               Int      @id @default(autoincrement())
  initiativeId     Int
  endorser         Account  @relation(name: "Endorsed", fields: [endorserId], references: [id])
  endorserId       Int
  endorseeId       Int
  timestamp        DateTime @default(now())
  endorsementValue Int
  data             Json?
}

model Tag {
  id         Int                  @id @default(autoincrement())
  type       String
  value      String
  active     Boolean              @default(true)
  terminal   Terminal             @relation(fields: [terminalId], references: [id])
  terminalId Int
  discordId  String?
  data       Json?
  tickets    AccountTerminalTag[]

  @@unique([value, terminalId])
}

model AccountTerminalTag {
  tag              Tag             @relation(fields: [tagId], references: [id])
  tagId            Int
  ticket           AccountTerminal @relation(fields: [ticketAccountId, ticketTerminalId], references: [accountId, terminalId])
  ticketAccountId  Int
  ticketTerminalId Int

  @@id([tagId, ticketAccountId, ticketTerminalId])
}

enum AccountInitiativeStatus {
  INTERESTED
  CONTRIBUTING
  PREVIOUSLY_CONTRIBUTED
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  userId             Int?
  user               Account?  @relation(fields: [userId], references: [id])
}

model Proposal {
  id              Int                 @id @default(autoincrement())
  terminalId      Int?
  terminal        Terminal?           @relation(fields: [terminalId], references: [id])
  authorAddress   String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now())
  data            Json?
  relatedAccounts AccountProposal[]
  signatures      ProposalSignature[]
}

model AccountProposal {
  id         Int                 @id @default(autoincrement())
  accountId  Int
  account    Account             @relation(fields: [accountId], references: [id])
  proposalId Int
  proposal   Proposal            @relation(fields: [proposalId], references: [id])
  type       AccountProposalType
}

model ProposalSignature {
  id                  Int      @id @default(autoincrement())
  proposalId          Int
  proposal            Proposal @relation(fields: [proposalId], references: [id])
  signingAddress      String
  representingAddress String? // used for tracking parent gnosis safe
  createdAt           DateTime @default(now())
  message             String
  signature           String
}

enum AccountProposalType {
  AUTHOR
  COLLABORATOR
  SIGNER
  FUNDER
  RECIPIENT
}
